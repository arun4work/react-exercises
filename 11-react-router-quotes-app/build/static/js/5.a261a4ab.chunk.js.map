{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","history","useHistory","location","useLocation","console","log","quotes","ascending","isSortAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","loadedQuotes","data","error","status","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,wFCkB5CC,EAhBG,SAACC,GACf,OACI,qBAAIC,UAAWC,IAAQC,KAAvB,UACI,mCACI,qCACI,4BAAIH,EAAMI,SAEd,qCAAaJ,EAAMK,YAEvB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBC2CGC,EAxCG,SAACR,GACf,IAAMS,EAAUC,cACVC,EAAWC,cACjBC,QAAQC,IAAIH,GACZ,IAdgBI,EAAQC,EAelBC,EAA4C,QADhC,IAAIC,gBAAgBP,EAASQ,QACbC,IAAI,QAYhCC,GA3BUN,EA2BgBf,EAAMe,OA3BdC,EA2BsBC,EA1BvCF,EAAOO,MAAK,SAACC,EAAQC,GACxB,OAAIR,EACOO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAwB5C,OADAM,QAAQC,IAAI,sBAER,eAAC,WAAD,WACI,qBAAKb,UAAWC,IAAQuB,QAAxB,SACI,yBAAQC,QAfA,WAIhBjB,EAAQkB,KAAK,CACTC,SAAUjB,EAASiB,SACnBT,OAAO,QAAD,OAAUF,EAAkB,OAAS,UASvC,kBACUA,EAAkB,aAAe,iBAG/C,oBAAIhB,UAAWC,IAAQ2B,KAAvB,SACKR,EAAaS,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEIxB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMxB,a,wBCNpByB,UAhCG,WACd,MAKIC,YAAQC,KAJRC,EADJ,EACIA,YACMC,EAFV,EAEIC,KACAC,EAHJ,EAGIA,MACAC,EAJJ,EAIIA,OAQJ,OALAC,qBAAU,WACN3B,QAAQC,IAAI,qCACZqB,MACD,CAACA,IAEW,YAAXI,EAEI,qBAAKtC,UAAU,WAAf,SACI,cAACwC,EAAA,EAAD,MAKRH,EACO,mBAAGrC,UAAU,WAAb,SAAyBqC,IAG/BF,GAAwC,IAAxBA,EAAaM,OAI3B,cAAC,EAAD,CAAW3B,OAAQqB,IAHf,mBAAGnC,UAAU,WAAb","file":"static/js/5.a261a4ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2oKNU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__1PKSI\",\"sorting\":\"QuoteList_sorting__6oe71\"};","import {Link} from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link className='btn' to={`/quotes/${props.id}`}>\n                View Fullscreen\n            </Link>\n        </li>\n    );\n};\n\nexport default QuoteItem;\n","import {Fragment} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props) => {\n    const history = useHistory();\n    const location = useLocation();\n    console.log(location);\n    const urlParams = new URLSearchParams(location.search);\n    const isSortAscending = urlParams.get('sort') === 'asc';\n\n    const sortHandler = () => {\n        //history.push(`/quotes?sort=${isSortAscending ? 'desc' : 'asc'}`);\n\n        //alternative way to push to history object if url is complex\n        history.push({\n            pathname: location.pathname,\n            search: `sort=${isSortAscending ? 'desc' : 'asc'}`,\n        });\n    };\n\n    const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n    console.log('QuoteList Running!');\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button onClick={sortHandler}>\n                    sort {isSortAscending ? 'Descending' : 'Ascending'}\n                </button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n","import QuoteList from '../components/quotes/QuoteList';\r\nimport useHttp from '../hooks/use-http';\r\nimport {getAllQuotes} from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport {useEffect} from 'react';\r\n\r\nconst AllQuotes = () => {\r\n    const {\r\n        sendRequest,\r\n        data: loadedQuotes,\r\n        error,\r\n        status,\r\n    } = useHttp(getAllQuotes);\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect Running in AllQuotes.js');\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>;\r\n    }\r\n\r\n    if (!loadedQuotes || loadedQuotes.length === 0) {\r\n        return <p className='centered'>No Quote found.</p>;\r\n    }\r\n\r\n    return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}