{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","error","status","commentTextRef","useRef","onAddedComment","useEffect","console","log","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","addCommentHandler","useCallback","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/4.58ffa600.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2epK8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2HZJ5\",\"loading\":\"NewCommentForm_loading__3U0Om\",\"control\":\"NewCommentForm_control__S7rPb\",\"actions\":\"NewCommentForm_actions__1bSTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2QCxf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__30qcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1wN-t\"};","import {useRef, useEffect} from 'react';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n    const {sendRequest, error, status} = useHttp(addComment);\n    const commentTextRef = useRef();\n\n    const {onAddedComment} = props;\n    useEffect(() => {\n        console.log('useEffect Running in NewCommentForm!');\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [onAddedComment, status, error]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        // optional: Could validate here\n\n        const enteredText = commentTextRef.current.value;\n        // send comment to server\n        sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import {useCallback, useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nimport useHttp from '../../hooks/use-http';\nimport {getAllComments} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const {\n        sendRequest,\n        data: loadedComments,\n        error,\n        status,\n    } = useHttp(getAllComments);\n    const {quoteId} = useParams();\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    const addCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === 'pending') {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    if (\n        status === 'completed' &&\n        loadedComments &&\n        loadedComments.length === 0\n    ) {\n        comments = <p className='centered'>No comments added yet</p>;\n    }\n\n    if (error) {\n        comments = <p className='centered'>{error}</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import {useParams, Route, Link, useRouteMatch} from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport {useEffect} from 'react';\r\nimport useHttp from '../hooks/use-http';\r\nimport {getSingleQuote} from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst QuoteDetail = () => {\r\n    const {\r\n        sendRequest,\r\n        data: loadedQuote,\r\n        error,\r\n        status,\r\n    } = useHttp(getSingleQuote);\r\n    const {quoteId} = useParams();\r\n    const match = useRouteMatch();\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect Running QuoteDetails.js');\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>;\r\n    }\r\n\r\n    if (!loadedQuote || !loadedQuote.text) {\r\n        return <p>No quote found!</p>;\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <HighlightedQuote\r\n                text={loadedQuote.text}\r\n                author={loadedQuote.author}\r\n            />\r\n\r\n            {/* Conditionally render Comments link if comment section is not dispayed with nested Route */}\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn' to={`${match.url}/comments`}>\r\n                        Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}