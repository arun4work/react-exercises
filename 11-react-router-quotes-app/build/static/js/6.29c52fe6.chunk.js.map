{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","console","log","push","quote"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCsE/BC,EAnEG,SAACL,GACf,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACI,eAAC,WAAD,WACI,cAAC,IAAD,CACIE,KAAML,EACNM,QAAS,SAACC,GAAD,iFAIb,cAAC,EAAD,UACI,uBACIC,QAlBK,WACjBP,GAAc,IAkBFP,UAAWC,IAAQc,KACnBC,SA/BhB,SAA2BC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAACC,OAAQL,EAAeM,KAAMH,KAoBvC,UAKKvB,EAAM2B,WACH,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACI,cAACC,EAAA,EAAD,MAIR,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAExC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,OAAf,kBACA,0BACIE,GAAG,OACHE,KAAK,IACLD,IAAKvB,OAGb,qBAAKV,UAAWC,IAAQkC,QAAxB,SACI,wBAAQnC,UAAU,MAAMoC,QArCvB,WACjB7B,GAAc,IAoCE,kC,gBCjCT8B,UAxBE,WACb,MAA8BC,YAAQC,KAA/BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OACdC,EAAUC,cAEhBC,qBAAU,WACNC,QAAQC,IAAI,iCACG,cAAXL,GAEAC,EAAQK,KAAK,aAElB,CAACN,EAAQC,IAMZ,OACI,cAAC,EAAD,CACIhB,UAAsB,YAAXe,EACXlB,WAPgB,SAACyB,GACrBR,EAAYQ","file":"static/js/6.29c52fe6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__LP4dE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3BZEz\",\"loading\":\"QuoteForm_loading__1CSOm\",\"control\":\"QuoteForm_control__2zLbm\",\"actions\":\"QuoteForm_actions__19Oes\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import {Fragment, useRef, useState} from 'react';\nimport {Prompt} from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n    const [isEntering, setIsEntering] = useState(false);\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n        event.preventDefault();\n\n        const enteredAuthor = authorInputRef.current.value;\n        const enteredText = textInputRef.current.value;\n\n        // optional: Could validate here\n\n        props.onAddQuote({author: enteredAuthor, text: enteredText});\n    }\n\n    const focusHandler = () => {\n        setIsEntering(true);\n    };\n\n    const clickHandler = () => {\n        setIsEntering(false);\n    };\n\n    return (\n        <Fragment>\n            <Prompt\n                when={isEntering}\n                message={(location) =>\n                    `Are you sure, you want to leave the page? All your data will be lost!`\n                }\n            />\n            <Card>\n                <form\n                    onFocus={focusHandler}\n                    className={classes.form}\n                    onSubmit={submitFormHandler}\n                >\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor='author'>Author</label>\n                        <input type='text' id='author' ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor='text'>Text</label>\n                        <textarea\n                            id='text'\n                            rows='5'\n                            ref={textInputRef}\n                        ></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button className='btn' onClick={clickHandler}>\n                            Add Quote\n                        </button>\n                    </div>\n                </form>\n            </Card>\n        </Fragment>\n    );\n};\n\nexport default QuoteForm;\n","import {useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport {addQuote} from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const {sendRequest, status} = useHttp(addQuote);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect Running in NewQUote');\r\n        if (status === 'completed') {\r\n            //redirect to all quotes page.\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history]);\r\n\r\n    const addQuoteHandler = (quote) => {\r\n        sendRequest(quote);\r\n    };\r\n\r\n    return (\r\n        <QuoteForm\r\n            isLoading={status === 'pending'}\r\n            onAddQuote={addQuoteHandler}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}